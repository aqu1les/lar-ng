{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;AACuD;AACR;;;AAE/C,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,KAAK;QACX,YAAY,EAAE,GAAG,EAAE,CAAC,iOAA0B,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;KACxE;IACD;QACE,IAAI,EAAE,MAAM;QACZ,YAAY,EAAE,GAAG,EAAE,CAAC,sMAA4B,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;KAC3E;IACD;QACE,IAAI,EAAE,IAAI;QACV,SAAS,EAAE,wDAAY;KACxB;CACF,CAAC;AAMK,MAAM,gBAAgB;;gFAAhB,gBAAgB;6GAAhB,gBAAgB;iHAHlB,CAAC,iEAAoB,CAAC,MAAM,CAAC,CAAC,EAC7B,yDAAY;mIAEX,gBAAgB,oFAFjB,yDAAY;;;;;;;;;;;;;;;;;;;ACrBxB;;;AASO,MAAMC,UAAU,GAA2B;AAChD,cAAY,MACV,uIAAgCC,IAAhC,CAAsCC,CAAD,IAAOA,CAAC,CAACC,aAA9C,CAF8C;AAGhD,aAAW,MAAM,mKAA8BF,IAA9B,CAAoCC,CAAD,IAAOA,CAAC,CAACE,YAA5C;AAH+B,CAA3C;AAWD,MAAOC,YAAP,CAAmB;AAIvBC,cACUC,UADV,EAEUC,QAFV,EAE4B;AADlB;AACA;AACN;;AAEEC,iBAAe;AAAA;;AAAA;AACnB,YAAMC,aAAa,GACjB,KAAI,CAACH,UAAL,CAAgBI,aAAhB,CAA8BC,YAA9B,CAA2C,WAA3C,CADF;;AAGA,WAAI,CAACC,SAAL,CAAeC,eAAf,OAAqCd,UAAU,CAACU,aAAD,CAAV,EAArC,EAAkE;AAChEF,gBAAQ,EAAE,KAAI,CAACA;AADiD,OAAlE;AAJmB;AAOpB;;AAhBsB;;;mBAAZH,cAAYU,+DAAAA,CAAAA,qDAAAA,GAAAA,+DAAAA,CAAAA,mDAAAA;AAAA;;;QAAZV;AAAYW;AAAAC;AAAA;wEACSlB,2DAAgBA;;;;;;;;;;;;;;ACrBlDgB,MAAAA,gEAAAA;;;;;;;;;;;;;;;;;;;;;;;ACC0D;AACX;AACS;AAET;;AAQxC,MAAM,SAAS;;kEAAT,SAAS;sGAAT,SAAS,cAFR,wDAAY;2GADb,EAAE,YADJ,CAAC,oEAAa,EAAE,yDAAY,EAAE,iEAAgB,CAAC;mIAI7C,SAAS,mBALL,wDAAY,aACjB,oEAAa,EAAE,yDAAY,EAAE,iEAAgB;;;;;;;;;;;;;;;ACTzD,gFAAgF;AAChF,mEAAmE;AACnE,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,sEAAsE;;;;;;;;;;;;;;;;;ACfvB;AAGF;AACY;AAEzD,IAAI,6EAAsB,EAAE;IAC1B,6DAAc,EAAE,CAAC;CAClB;AAED,wEAAwB,CAAC,eAAe,CAAC,sDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AppComponent } from './app.component';\n\nconst routes: Routes = [\n  {\n    path: 'doc',\n    loadChildren: () => import('./doc/doc.module').then((m) => m.DocModule),\n  },\n  {\n    path: 'lazy',\n    loadChildren: () => import('./lazy/lazy.module').then((m) => m.LazyModule),\n  },\n  {\n    path: \"**\",\n    component: AppComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Injector,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\n\nexport const COMPONENTS: { [key: string]: any } = {\n  'app-lazy': () =>\n    import('./lazy/lazy.component').then((m) => m.LazyComponent),\n  'app-doc': () => import('./doc/doc.component').then((m) => m.DocComponent),\n};\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements AfterViewInit {\n  @ViewChild('container', { read: ViewContainerRef })\n  container!: ViewContainerRef;\n\n  constructor(\n    private elementRef: ElementRef<HTMLElement>,\n    private injector: Injector\n  ) {}\n\n  async ngAfterViewInit() {\n    const componentName =\n      this.elementRef.nativeElement.getAttribute('component')!;\n\n    this.container.createComponent(await COMPONENTS[componentName](), {\n      injector: this.injector,\n    });\n  }\n}\n","<ng-container #container></ng-container>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule } from '@angular/router';\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, RouterModule, AppRoutingModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["ViewContainerRef","COMPONENTS","then","m","LazyComponent","DocComponent","AppComponent","constructor","elementRef","injector","ngAfterViewInit","componentName","nativeElement","getAttribute","container","createComponent","i0","selectors","viewQuery"],"sourceRoot":"webpack:///"}